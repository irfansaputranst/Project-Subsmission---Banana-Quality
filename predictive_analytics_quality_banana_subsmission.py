# -*- coding: utf-8 -*-
"""Predictive Analytics - Quality Banana- Subsmission.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pwqm9m2fg9xW0vqRLDkTzA2FnSY18Qsu

# Predictive Analytics - Subsmission Machine Learning Terapan

# 1. Necessary Libraries
Disini kita mengumpulkan berbagai library python yang akan digunakan sepanjang memprediksi analytics.
"""

!pip install catboost

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

from scipy.stats import norm
from sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.metrics import roc_curve, auc

from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from lightgbm import LGBMClassifier
from sklearn.neural_network import MLPClassifier
from catboost import CatBoostClassifier
from xgboost import XGBClassifier, XGBRFClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.ensemble import GradientBoostingClassifier, HistGradientBoostingClassifier

import warnings
warnings.filterwarnings('ignore')

"""## 1.1 Import Data
Disini kita akan mengimpor data. Data sendiri saya ambil dari sebuah website Kaggle

Berikut adalah linknya:
https://www.kaggle.com/datasets/l3llff/banana


"""

banana = pd.read_csv("/content/banana_quality.csv")
banana.head()

"""Dapat terlihat bahwa data dari Kualitas Pisang ini terdiri dari 8 kolom (variabel)"""

banana.info()

"""Setelah melakukan eksekusi banana.info() maka terlihat dari jumlah data, berapa variabel, dan tipe data.

Variabel: 8 Buah
Jumlah Data: 8000 data
Tipe Data: 7 tipe data float64 dan 1 tipe data object

# 2. Exploratory Data Analysis

## 2.1 Checking Duplicated
Kita akan melakukan pengecekan duplikat disetiap variabelnya dengan cara

```
# banana.duplicated.sum()
```
"""

banana.duplicated().sum()

"""Terlihat bahwa data tersedia tidak memiliki data yang duplikat. Jadi aman digunakan

## 2.2 Checking Null
Setelah pengecekan data duplikat, kita akan mengecek jumlah kolom/baris yang kosong di sebuah data


```
# banana.isnull().sum()
```
"""

banana.isnull().sum()

"""Terlihat bahwa, setiap variabel tidak memiliki data yang kosong. Jadi aman digunakan

## 2.3 Checking Data Describe
Selanjutnya kita akan mengecek deskripsi statistik data dengan cara:


```
# banana.describe()
```
"""

banana.describe()

"""Fungsi describe() memberikan informasi statistik pada masing-masing kolom, antara lain:

* Count  adalah jumlah sampel pada data.
* Mean adalah nilai rata-rata.
* Std adalah standar deviasi.
* Min yaitu nilai minimum setiap kolom.
* 25% adalah kuartil pertama. Kuartil adalah nilai yang menandai batas interval dalam empat bagian sebaran yang sama.
* 50% adalah kuartil kedua, atau biasa juga disebut median (nilai tengah).
* 75% adalah kuartil ketiga.
* Max adalah nilai maksimum.

## 2.4 EDA - Univariate Analysis (Categorical Variabel)
Disini kita akan mengecek, distribusi dari sebuah variabel masing-masing
"""

plt.figure(figsize=(10,4))
cols = ["#03AED2", "#68D2E8"]
plt.subplot(1,2,1)
sns.barplot(x=banana["Quality"].value_counts().index, y=banana["Quality"].value_counts(), palette=cols)
plt.ylabel("")
plt.subplot(1,2,2)
plt.pie(x=banana["Quality"].value_counts(), labels=banana["Quality"].value_counts().index, shadow=True,
        explode=[0.02, 0.02], startangle=30, autopct='%0.2f%%', colors=cols)
plt.legend(labels=["good", "bad"], loc=(1,0.8), fontsize="small")
plt.suptitle("Angka dan rasio variabel target", fontsize=16)
plt.tight_layout()
print(banana.Quality.value_counts())
plt.show()

"""## 2.5 EDA - Univariate Analysis (Numerical Variabel)
Sama seperti halnya Disribution of Categorical Variabel. Distribution of Numerical Variabel juga kita akan mengecek seberapa besar distribusi dalam variabel numerik
"""

num_cols = banana.select_dtypes(include=["float64"]).columns

banana.hist(bins=50, figsize=(20,15))
plt.show()

"""## 2.6 Outliers
Setelah melakukan pengecekan distribusi, kita akan melakukan pengecekan outlier dan membersihkan outlier secara langsung.
"""

def clean_outliers(data, column):
    Q1 = data[column].quantile(0.25)
    Q3 = data[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_limit = Q1 - (IQR * 1.5)
    upper_limit = Q3 + (IQR * 1.5)
    data = data[~((data[column] > upper_limit) | (data[column] < lower_limit))]
    return data

for i in num_cols:
    banana = clean_outliers(banana, i)

"""## 2.7 EDA - Multivariate Analysis
Disini akan melakukan korelasi fitur "Quality" dengan fitur Numerik. Kenapa harus korelasi? karena kita akan mengukur kekuatan hubungan anntara dua variabel serta arahnya (positif atau negatif)
"""

sns.pairplot(banana[num_cols], diag_kind = 'kde')

plt.figure(figsize=(8,5))
sns.heatmap(banana.corr(), linewidths=0.05, annot=True,
            annot_kws={'size': 9, 'rotation': 45}, fmt='.3f', cmap="Blues")
plt.xticks(fontsize=10), plt.yticks(fontsize=10)
plt.title("Korelasi antar Fitur", fontsize=16)
plt.show()

"""## 3. Data Prepation"""

banana["Quality"] = banana["Quality"].map({"Good":1, "Bad":0})

"""## 3.1 Train-Test Split
Membagi dataset menjadi data latih (train) dan data uji (test) merupakan hal yang harus kita lakukan sebelum membuat model. Kita perlu mempertahankan sebagian data yang ada untuk menguji seberapa baik generalisasi model terhadap data baru
"""

y = banana["Quality"]
X = banana.drop(["Quality"], axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## 3.2 Normalisasi
Hal ini mungkin tidak dapat dilakukan karena nilai variansnya tidak tinggi.

"""

scaler = StandardScaler()
banana.iloc[:,:-1] = scaler.fit_transform(banana.iloc[:,:-1])

"""# 4. Model Development
Disini kita akan membandingkan akurasi dari berbagai algoritma model machine learning
"""

model_list = [RandomForestClassifier(), LogisticRegression(), SVC(), MLPClassifier(), CatBoostClassifier(verbose=False),
             AdaBoostClassifier(), ExtraTreesClassifier(), GradientBoostingClassifier(), HistGradientBoostingClassifier(),
             XGBClassifier(), XGBRFClassifier()]

model_name_list = []
model_accuracies = []

for i in model_list:
    model = i.fit(X_train, y_train)
    model_name = model.__class__.__name__
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)

    model_name_list.append(model_name)
    model_accuracies.append(accuracy)

    print(f"{model_name} accuracy: {accuracy:.4f}\n")

"""## 4.1 Evaluation Models"""

# Generating a list of blue colors from dark to light
colors = plt.cm.Blues(np.linspace(0.3, 0.9, len(model_name_list)))

# Plotting the accuracies with blue colors from dark to light
plt.figure(figsize=(10, 6))
plt.bar(model_name_list, model_accuracies, color=colors)
plt.title('Perbandingan Akurasi Model')
plt.xlabel('Model')
plt.ylabel('Akurasi')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

# Show the plot
plt.show()